{
  "components": {
    "comp-build-and-push-torchserve-image": {
      "executorLabel": "exec-build-and-push-torchserve-image",
      "inputDefinitions": {
        "parameters": {
          "bucket_name": {
            "parameterType": "STRING"
          },
          "code_bucket_path": {
            "parameterType": "STRING"
          },
          "docker_image_name": {
            "parameterType": "STRING"
          },
          "gcp_project": {
            "parameterType": "STRING"
          },
          "gcp_region": {
            "parameterType": "STRING"
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-build-and-push-torchserve-image": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "build_and_push_torchserve_image"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'google-cloud-build' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef build_and_push_torchserve_image(\n    code_bucket_path: str, \n    gcp_project: str, \n    gcp_region: str, \n    bucket_name: str, \n    docker_image_name: str\n):\n    # Import inside the component\n    from google.cloud import cloudbuild_v1 as cloudbuild\n    from google.cloud import storage\n    import logging\n\n    # Set up logging\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n\n    # Define environment variables\n    TORCH_SERVE_PATH = f\"gs://{bucket_name}/code/predictor/\"\n    CUSTOM_PREDICTOR_IMAGE_URI = f\"gcr.io/{gcp_project}/{docker_image_name}\"\n\n    # Set up the CloudBuild client\n    client = cloudbuild.CloudBuildClient()\n\n    # Log the environment variables for debugging\n    logger.info(f\"GCP Project: {gcp_project}\")\n    logger.info(f\"GCP Region: {gcp_region}\")\n    logger.info(f\"Bucket Name: {bucket_name}\")\n    logger.info(f\"TorchServe Path: {TORCH_SERVE_PATH}\")\n    logger.info(f\"Docker Image Name: {docker_image_name}\")\n    logger.info(f\"Custom Docker Image URI: {CUSTOM_PREDICTOR_IMAGE_URI}\")\n\n    # Create Cloud Build configuration (cloudbuild.yaml)\n    cloudbuild_config = {\n        'steps': [\n            {\n                'name': 'gcr.io/cloud-builders/docker',\n                'args': ['build', '-t', CUSTOM_PREDICTOR_IMAGE_URI, '.'],\n                'dir': '/workspace',  # Ensure the working directory is set\n            },\n        ],\n        'images': [CUSTOM_PREDICTOR_IMAGE_URI],\n    }\n\n    # Create a Cloud Build build request\n    build = cloudbuild.Build(\n        steps=cloudbuild_config['steps'],\n        images=cloudbuild_config['images'],\n    )\n\n    # Trigger Cloud Build job\n    build_response = client.create_build(project_id=gcp_project, build=build)\n\n    # Log the build details\n    logger.info(f\"Cloud Build Triggered: {build_response.name}\")\n\n    # Optionally, wait for the build to complete\n    operation = client.get_operation(name=build_response.name)\n    logger.info(f\"Build completed with status: {operation.status}\")\n    return build_response.name\n\n"
          ],
          "image": "python:3.7"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "This pipeline builds and pushes a TorchServe Docker image using Cloud Build.",
    "name": "build-and-push-torchserve-image-pipeline"
  },
  "root": {
    "dag": {
      "tasks": {
        "build-and-push-torchserve-image": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-build-and-push-torchserve-image"
          },
          "inputs": {
            "parameters": {
              "bucket_name": {
                "runtimeValue": {
                  "constant": "arsa_model_deployment_uscentral"
                }
              },
              "code_bucket_path": {
                "runtimeValue": {
                  "constant": "gs://arsa_model_deployment_uscentral/code"
                }
              },
              "docker_image_name": {
                "runtimeValue": {
                  "constant": "pytorch_predict_{APP_NAME}"
                }
              },
              "gcp_project": {
                "runtimeValue": {
                  "constant": "amazonreviewssentimentanalysis"
                }
              },
              "gcp_region": {
                "runtimeValue": {
                  "constant": "us-central1"
                }
              }
            }
          },
          "taskInfo": {
            "name": "build-and-push-torchserve-image"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "bucket_name": {
          "parameterType": "STRING"
        },
        "code_bucket_path": {
          "parameterType": "STRING"
        },
        "docker_image_name": {
          "parameterType": "STRING"
        },
        "gcp_project": {
          "parameterType": "STRING"
        },
        "gcp_region": {
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.4.0"
}