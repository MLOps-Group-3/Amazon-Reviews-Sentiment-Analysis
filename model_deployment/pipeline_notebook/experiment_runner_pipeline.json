{
  "components": {
    "comp-experiment-runner-component": {
      "executorLabel": "exec-experiment-runner-component",
      "inputDefinitions": {
        "parameters": {
          "code_bucket_path": {
            "parameterType": "STRING"
          },
          "mlflow_tracking_uri": {
            "parameterType": "STRING"
          },
          "output_hyperparams_path": {
            "parameterType": "STRING"
          }
        }
      }
    }
  },
  "defaultPipelineRoot": "gs://arsa_model_deployment_uscentral/pipeline_root/",
  "deploymentSpec": {
    "executors": {
      "exec-experiment-runner-component": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "experiment_runner_component"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'optuna' 'mlflow' 'torch' 'transformers' 'scikit-learn' 'pandas' 'google-cloud-storage' 'gcsfs' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef experiment_runner_component(\n    code_bucket_path: str,\n    mlflow_tracking_uri: str,\n    output_hyperparams_path: str,\n):\n    import os\n    import sys\n    import subprocess\n    from google.cloud import storage\n\n    # Logging setup\n    import logging\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n\n    # Download code from GCS\n    client = storage.Client()\n    bucket_name = code_bucket_path.split('/')[2]\n    prefix = '/'.join(code_bucket_path.split('/')[3:])\n    bucket = client.bucket(bucket_name)\n    blobs = bucket.list_blobs(prefix=prefix)\n\n    code_dir = \"/tmp/code\"\n    os.makedirs(code_dir, exist_ok=True)\n\n    for blob in blobs:\n        if blob.name.endswith(\".py\"):\n            # Maintain folder structure\n            relative_path = blob.name[len(prefix):].lstrip(\"/\")\n            file_path = os.path.join(code_dir, relative_path)\n            os.makedirs(os.path.dirname(file_path), exist_ok=True)\n            blob.download_to_filename(file_path)\n            logger.info(f\"Downloaded {blob.name} to {file_path}\")\n\n    # Add code_dir to sys.path\n    sys.path.insert(0, code_dir)\n    logger.info(f\"sys.path updated: {sys.path}\")\n\n    # Set MLflow tracking URI\n    os.environ[\"MLFLOW_TRACKING_URI\"] = mlflow_tracking_uri\n    logger.info(f\"MLflow tracking URI set to: {mlflow_tracking_uri}\")\n\n    # Run the experiment\n    try:\n        script_path = os.path.join(code_dir, \"experiment_runner_optuna.py\")\n        subprocess.run([\"python3\", script_path], check=True)\n\n        # Move the best hyperparameters file to the output path\n        hyperparams_local_path = os.path.join(code_dir, \"best_hyperparameters.json\")\n        storage_path = os.path.join(output_hyperparams_path, \"best_hyperparameters.json\")\n        if os.path.exists(hyperparams_local_path):\n            output_bucket = client.bucket(bucket_name)\n            blob = output_bucket.blob(storage_path)\n            blob.upload_from_filename(hyperparams_local_path)\n            logger.info(f\"Uploaded best hyperparameters to: gs://{bucket_name}/{storage_path}\")\n        else:\n            logger.warning(\"best_hyperparameters.json not found.\")\n    except Exception as e:\n        logger.error(f\"Experiment failed: {e}\")\n        raise\n\n"
          ],
          "image": "python:3.7",
          "resources": {
            "cpuLimit": 4.0,
            "memoryLimit": 17.179869184
          }
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "experiment-runner-pipeline"
  },
  "root": {
    "dag": {
      "tasks": {
        "experiment-runner-component": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-experiment-runner-component"
          },
          "inputs": {
            "parameters": {
              "code_bucket_path": {
                "runtimeValue": {
                  "constant": "gs://arsa_model_deployment_uscentral/code/trainer"
                }
              },
              "mlflow_tracking_uri": {
                "runtimeValue": {
                  "constant": "http://127.0.0.1:5000"
                }
              },
              "output_hyperparams_path": {
                "runtimeValue": {
                  "constant": "gs://arsa_model_deployment_uscentral/output/hyperparams/"
                }
              }
            }
          },
          "taskInfo": {
            "name": "experiment-runner-component"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "machine_type": {
          "defaultValue": "e2-standard-4",
          "isOptional": true,
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.4.0"
}